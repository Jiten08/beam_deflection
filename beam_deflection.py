import math 
import numpy as np
import plotly as py
import plotly.graph_objs as go

pointLoads = np.array([[]])  #PointForces [location, xmag, ymag]

#Inputs
span = 17 #span of the beam
A = 3     #Distance to the left support
B = 13    #Distance to the rigth support 

#ForceData
pointLoads = np.array([[6, 0, -90]])

#Defaults 
divs = 10000  #Divide the span upto 10000 points
delta = span/divs  #Distance between each data point
X = np.arange(0, span+delta, delta) #Range of X-coordinates


reactions = np.array([0.0, 0, 0])  #Reactions (Va, Ha, Vb)
shearForce = np.empty([0, len(X)])  #Shear forces at each data point
bendingMoment = np.empty([0, len(X)])  #Bending moment at each data point 

def reactions_PL(n):
    xp = pointLoads[n][0] #Location of point load
    fx = pointLoads[n][1] #Horizontal component
    fy = pointLoads[n][2] #Vertical component

    la_p = A - xp #lever arm at the pointLoad about A
    mp = fy*la_p  #moment generated by pointLoad about A
    la_vb = B - A #lever arm of vertical reaction at B about A

    Vb = mp/la_vb #Vertical reaction at B
    Va = -fy -Vb  #Vertical reaction at A
    Ha = -fx      #Horizontal reaction at A

    return Va, Vb, Ha
def shear_moment_PL(n):
    xp = pointLoads[n][0]
    fy = pointLoads[n][2]
    Va = PL_record[n][0]
    Vb = PL_record[n][2]

    Shear = np.zeros(len(X))
    Moment = np.zeros(len(X))

    for i, x in enumerate(X):
        shear = 0 
        moment = 0

        if x>A:
            #Calculate shear and moment due to reaction at A
            shear += Va
            moment -= Va*(x-A)
        
        if x>B:
            #Calculate shear and moment due to reaction at B
            shear += Vb
            moment -= Vb*(x-B)

        if x>xp:
            #Calculate shear and moment due to point load 
            shear += fy
            moment -= fy*(x-xp)

        Shear[i] = shear
        Moment[i] = moment

    return Shear, Moment






#Reaction Calculation 
PL_record = np.empty([0,3])
if len(pointLoads)>0:

    for n, p in enumerate(pointLoads): 
        va, vb, ha = reactions_PL(n)  #Calculate reactions
        PL_record = np.append(PL_record, [np.array([va, ha, vb])], axis = 0)  #Store reactions for each point load

        #Adding reactions to record 
        reactions[0] += va
        reactions[1] += ha
        reactions[2] += vb 

if len(pointLoads)>0:

    for n, p in enumerate(pointLoads): 
        Shear, Moment = shear_moment_PL(n)
        shearForce = np.append(shearForce, [Shear], axis = 0) #Store shear force for each point load 
        bendingMoment = np.append(bendingMoment, [Moment], axis = 0) #Store bending moment for each point load 
    

#Plotting
one = round(reactions[0],2)
two = round(reactions[1],2)
three = round(reactions[2],2)

print(f'The vertical reaction at A is {one} kN' )
print(f'The vertical reaction at B is {three} kN')
print(f'The horizontal reaction at A is {two} kN')

#Define layout 
layout = go.Layout(
        title = {'text' : 'Shear Force Diagram'},
        yaxis = dict(title='Shear Force (kN)'),
        xaxis = dict(title='Distance (m)', range=[-1, span+1]),
        showlegend=False
)

line = go.Scatter(
    x = X,
    y = sum(shearForce),
    mode = 'lines',
    name = 'Shear Force',
    line_color = 'green'
)

#Generate figure
fig = go.Figure(data= [line], layout=layout)

py.plot(fig)